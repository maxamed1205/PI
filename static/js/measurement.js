// --------------------------------------------------
// Connexion avec le serveur via Socket.IO
// --------------------------------------------------

var socket = io(); // Initialise la connexion en temps r√©el avec le serveur via Socket.IO

// --------------------------------------------------
// Variables pour stocker les donn√©es re√ßues en temps r√©el
// --------------------------------------------------

var forceTime = [];            // Liste des horodatages associ√©s aux mesures de force
var forceData = [];           // Liste des valeurs de force re√ßues
var angleTime = [];           // Liste des horodatages associ√©s aux mesures d'angle
var angleData = [];           // Liste des angles distaux mesur√©s
var angleDataProximal = [];   // Liste des angles proximaux mesur√©s
// var forceVsAngleX = [];       // Liste des angles (x) pour graphique force vs angle
// var forceVsAngleY = [];       // Liste des forces (y) pour graphique force vs angle

let latestDistal = null;      // Derni√®re valeur d'angle distal re√ßue
let latestProximal = null;    // Derni√®re valeur d'angle proximal re√ßue
let blockedPhalange = null;   // Variable indiquant la phalange bloqu√©e s√©lectionn√©e par l‚Äôutilisateur

let color = '#17a2b8'; // Couleur par d√©faut pour les points du graphique Force vs Angle

// Liste des s√©ries enregistr√©es et s√©rie en cours
const measurementSeries = []; // Tableau pour stocker toutes les s√©ries de mesure termin√©es (chacune avec force, angle, horodatage, etc.)
let currentSeries = null;    // Variable temporaire utilis√©e pour stocker les donn√©es de la s√©rie en cours de capture (avant validation finale)

// G√©n√©rateur de couleurs dynamiques par angle
const angleColorMap = {};    // Dictionnaire (objet JavaScript) associant chaque angle (ex: '30¬∞', '45¬∞') √† une couleur unique pour le graphique
let colorIndex = 0;          // Compteur pour suivre la progression dans la palette de couleurs disponibles

// Fonction pour g√©n√©rer une couleur unique pour chaque nouvel angle rencontr√©
function generateColor(angleLabel) {
    // V√©rifie si une couleur est d√©j√† attribu√©e √† cet angle ‚Äî si oui, la retourne
    if (angleColorMap[angleLabel]) {
        return angleColorMap[angleLabel]; // Renvoie la couleur d√©j√† assign√©e √† cet angle
    }

    // Palette de 10 couleurs pr√©d√©finies (choisies pour √™tre facilement distinguables dans un graphique)
    const palette = [
        '#1f77b4', // bleu
        '#ff7f0e', // orange
        '#2ca02c', // vert
        '#d62728', // rouge
        '#9467bd', // violet
        '#8c564b', // brun
        '#e377c2', // rose
        '#7f7f7f', // gris
        '#bcbd22', // jaune verd√¢tre
        '#17becf'  // cyan
    ];

    // S√©lectionne une couleur de la palette en fonction de l‚Äôindice courant (avec modulo pour boucler apr√®s 10 couleurs)
    const color = palette[colorIndex % palette.length];

    // Associe cette couleur au label d‚Äôangle (ex: '60¬∞') dans le dictionnaire
    angleColorMap[angleLabel] = color;

    // Incr√©mente l‚Äôindice pour la prochaine couleur
    colorIndex++;

    // Retourne la couleur assign√©e
    return color;
}

function generateUniqueLabel(baseLabel) {
    let existingLabels = measurementSeries.map(s => s.label);
    if (currentSeries) {
        existingLabels.push(currentSeries.label);
    }

    if (!existingLabels.includes(`Blocage D-I √† ${baseLabel}`)) {
        return `Blocage D-I √† ${baseLabel}`;
    }

    let suffix = 1;
    while (existingLabels.includes(`Blocage D-I √† ${baseLabel} #${suffix}`)) {
        suffix++;
    }
    return `Blocage D-I √† ${baseLabel} #${suffix}`;
}



// --------------------------------------------------
// Fonction utilitaire pour formater l'heure (mm:ss)
// --------------------------------------------------

function getFormattedTime() {
    var now = new Date(); // R√©cup√®re l‚Äôinstant actuel
    return now.getMinutes().toString().padStart(2, '0') + ":" + now.getSeconds().toString().padStart(2, '0'); // Formate mm:ss
}


// --------------------------------------------------
// Initialisation des √©l√©ments une fois le DOM charg√©
// --------------------------------------------------

document.addEventListener('DOMContentLoaded', () => { // D√©clench√© lorsque le HTML est compl√®tement charg√© (hors images, CSS)
    blockedPhalange = window.blockedPhalange; // R√©cup√®re la variable globale transmise depuis le HTML (via template Jinja2)
    console.log("üöÄ JS ready ‚Äî blockedPhalange =", blockedPhalange); // Affiche dans la console la phalange bloqu√©e (utile pour d√©boguer)

    plotForceGraph(); // Affiche d√®s le d√©part le graphique Force vs Temps (vide mais pr√©sent)
    plotAmplitudeGraph(); // Affiche d√®s le d√©part le graphique Amplitude vs Temps (vide aussi)
    // plotForceVsAngleEmpty(); // Initialise le graphe Force vs Angle avec des tableaux vides
    renderForceVsAnglePlot(); // ‚¨ÖÔ∏è Affiche le graphique vide au chargement

    // Ajoute un √©couteur de changement de s√©lection dans la liste d√©roulante
    const selector = document.getElementById("seriesSelector");
    if (selector) {
        selector.addEventListener("change", () => {
            renderForceVsAnglePlot(); // Met √† jour le graphique selon la s√©lection
        });
    }

    setTimeout(() => { // D√©lai pour laisser le temps au DOM/CSS de se stabiliser avant de forcer le redimensionnement
        Plotly.Plots.resize(document.getElementById('graph-force')); // Force Plotly √† recalculer la taille du graphe de force
        Plotly.Plots.resize(document.getElementById('graph-amplitude')); // Force Plotly √† redimensionner le graphe d‚Äôamplitude
        Plotly.Plots.resize(document.getElementById('graph-force-vs-angle')); // Force Plotly √† redimensionner le graphe force/angle
    }, 200); // D√©lai en millisecondes (0.2 seconde) pour que tout soit bien pr√™t avant d‚Äôajuster les graphes

    // // üîΩ AJOUTE CECI ICI üîΩ
    // const startBtn = document.getElementById("startSeriesButton");
    // if (startBtn) {
    //     startBtn.addEventListener("click", () => {
    //         // Simulation automatique
    //         const anglesPossibles = ["30¬∞", "45¬∞", "60¬∞", "75¬∞"];
    //         const angleAleatoire = anglesPossibles[Math.floor(Math.random() * anglesPossibles.length)];
    //         simulateFakeMeasurementSeries(angleAleatoire);
    //     });
    // }
    const startBtn = document.getElementById("startSeriesButton");
    if (startBtn) {
        startBtn.addEventListener("click", () => {
            onStartMeasurementSeries();  // ‚¨ÖÔ∏è Utilise les vraies valeurs
        });
    }
});

// --------------------------------------------------
// R√©ception des donn√©es de force depuis le serveur
// --------------------------------------------------

socket.on('force_update', function(data) {
    var now = getFormattedTime();   // R√©cup√®re l‚Äôheure actuelle au format mm:ss
    forceTime.push(now);            // Ajoute le temps √† la liste des temps
    forceData.push(data.force);     // Ajoute la valeur de force re√ßue √† la liste
    plotForceGraph();               // Met √† jour le graphique avec les nouvelles donn√©es
});

// --------------------------------------------------
// R√©ception des donn√©es d‚Äôangle distal depuis le serveur
// --------------------------------------------------

socket.on('angle_distal_update', function(data) {
    latestDistal = parseFloat(data['Angle distale']).toFixed(1); // Convertit l‚Äôangle en nombre √† 1 d√©cimale
    document.getElementById('angle-distal').textContent = latestDistal; // Affiche l‚Äôangle dans l‚Äôinterface
    console.log("üì° distal re√ßu:", data); // Affiche dans la console pour v√©rification
    maybePlotNewPoint(); // Tente de tracer un point dans force vs angle (√† condition que les deux angles soient dispo)
});

// --------------------------------------------------
// R√©ception des donn√©es d‚Äôangle proximal depuis le serveur
// --------------------------------------------------

socket.on('angle_proximal_update', function(data) {
    latestProximal = parseFloat(data['Angle proximal']).toFixed(1); // Convertit l‚Äôangle en nombre √† 1 d√©cimale
    document.getElementById('angle-proximal').textContent = latestProximal; // Affiche l‚Äôangle dans l‚Äôinterface
    console.log("üì° proximal re√ßu:", data); // Affiche dans la console pour v√©rification
    maybePlotNewPoint(); // Tente de tracer un point dans force vs angle
});

// --------------------------------------------------
// Tracer le graphique de la force en fonction du temps
// --------------------------------------------------

function plotForceGraph() {
    Plotly.newPlot('graph-force', [{ // Cr√©e un graphique avec Plotly dans l‚Äô√©l√©ment HTML 'graph-force'
        x: forceTime,                // Axe des abscisses : temps
        y: forceData,               // Axe des ordonn√©es : valeurs de force
        mode: 'markers',            // Mode "points"
        name: 'Force (N)',          // Nom de la courbe
        line: {color: '#009640'}    // Couleur verte
    }], {
        xaxis: {title: 'Temps (mm:ss)'},    // Titre de l‚Äôaxe X
        yaxis: {title: 'Force (N)'},        // Titre de l‚Äôaxe Y
        margin: {l: 50, r: 30, t: 20, b: 50},// Marges du graphe
        autosize: true                       // Redimensionnement automatique
    }, {responsive: true});                  // Rend le graphe adaptatif √† la taille de l‚Äô√©cran
}

// --------------------------------------------------
// Tracer le graphique de l‚Äôamplitude en fonction du temps
// --------------------------------------------------

function plotAmplitudeGraph() {
    Plotly.newPlot('graph-amplitude', [
        {
            x: angleTime,                   // Axe X : temps
            y: angleData,                   // Axe Y : angle distal
            mode: 'markers',                // Mode "points"
            name: 'Distal (¬∞)',             // Nom de la s√©rie
            line: { color: '#d9534f' }      // Couleur rouge
        },
        {
            x: angleTime,                   // Axe X : temps (le m√™me)
            y: angleDataProximal,           // Axe Y : angle proximal
            mode: 'markers',
            name: 'Proximal (¬∞)',
            line: { color: '#007bff' }      // Couleur bleue
        }
    ], {
        xaxis: { title: 'Temps (mm:ss)' },  // Titre de l‚Äôaxe X
        yaxis: { title: 'Amplitude (¬∞)' },  // Titre de l‚Äôaxe Y
        margin: { l: 50, r: 30, t: 20, b: 50 },
        autosize: true
    }, { responsive: true });
}

// --------------------------------------------------
// Ajoute un point sur les graphiques si les deux angles sont disponibles
// --------------------------------------------------
function maybePlotNewPoint() {
    if (latestDistal !== null && latestProximal !== null) { // V√©rifie que les deux mesures d'angles ont √©t√© re√ßues
        const now = getFormattedTime(); // R√©cup√®re l‚Äôheure actuelle
        angleTime.push(now); // Enregistre l‚Äôinstant de mesure
        angleData.push(parseFloat(latestDistal)); // Ajoute l‚Äôangle distal au tableau
        angleDataProximal.push(parseFloat(latestProximal)); // Ajoute l‚Äôangle proximal au tableau

        plotAmplitudeGraph(); // Met √† jour le graphique d‚Äôamplitude

        const lastForce = forceData[forceData.length - 1]; // R√©cup√®re la derni√®re valeur de force re√ßue
        let angleLibre = null; // Initialisation de la variable angle libre (celui non bloqu√©)

        if (blockedPhalange === "proximale") { // Si la phalange proximale est bloqu√©e
            color = '#d9534f'; // Rouge = distal (car c‚Äôest l‚Äôangle libre)
            angleLibre = latestDistal; // L‚Äôangle libre est distal
        } else if (blockedPhalange === "distale") { // Si la phalange distale est bloqu√©e
            color = '#007bff'; // Bleu = proximal (car c‚Äôest l‚Äôangle libre)
            angleLibre = latestProximal; // L‚Äôangle libre est proximal
        }

        if (lastForce !== undefined && angleLibre !== null) { // Si la force et l‚Äôangle libre sont valides
            // updateForceVsAngle(lastForce, angleLibre); // Ajoute le point au graphe force vs angle
            console.log("‚úÖ Donn√©e ajout√©e au graphique Force vs Angle:", lastForce, angleLibre);
        }

        latestDistal = null; // R√©initialise la derni√®re valeur re√ßue
        latestProximal = null;
    }
}

// --------------------------------------------------
// Initialise un graphique vide Force vs Angle libre
// --------------------------------------------------

// function plotForceVsAngleEmpty() { // Fonction pour initialiser un graphique vide Force vs Angle
//     Plotly.newPlot('graph-force-vs-angle', [{ // Cr√©e un nouveau trac√© Plotly dans l‚Äô√©l√©ment HTML avec l‚ÄôID sp√©cifi√©
//         x: [], // Initialise la s√©rie d‚Äôabscisses (angle libre) comme un tableau vide
//         y: [], // Initialise la s√©rie d‚Äôordonn√©es (force) comme un tableau vide
//         mode: 'markers', // Mode d‚Äôaffichage : uniquement des points (pas de lignes)
//         name: 'Force vs Angle libre', // L√©gende de la courbe dans l‚Äôinterface graphique
//         line: { color: color } // Couleur utilis√©e pour les points
//     }], {
//         xaxis: { title: 'Angle libre (¬∞)' }, // Titre affich√© pour l‚Äôaxe horizontal
//         yaxis: { title: 'Force (N)' }, // Titre affich√© pour l‚Äôaxe vertical
//         margin: { l: 50, r: 30, t: 20, b: 50 }, // Marges autour du graphique
//         // title: "Force en fonction de l'angle mesur√© (libre)" // Titre du graphique
//     }, { responsive: true }); // Rend le graphique adaptatif au redimensionnement de l‚Äô√©cran
// }

// --------------------------------------------------
// Met √† jour le graphique Force en fonction de l‚ÄôAngle libre
// --------------------------------------------------
// function updateForceVsAngle(forceValue, angleLibre) {
//     forceVsAngleX.push(parseFloat(angleLibre)); // Ajoute l‚Äôangle √† la liste des abscisses
//     forceVsAngleY.push(parseFloat(forceValue)); // Ajoute la force √† la liste des ordonn√©es

//     console.log("üìà Trac√© Force vs Angle:", forceVsAngleX, forceVsAngleY); // Affiche les donn√©es actuelles en console

//     Plotly.newPlot('graph-force-vs-angle', [{ // Cr√©e un nouveau graphique dans la div avec l‚ÄôID donn√©
//         x: forceVsAngleX, // Axe des abscisses : angles libres
//         y: forceVsAngleY, // Axe des ordonn√©es : forces
//         mode: 'markers', // Type de graphique : nuage de points
//         name: 'Force vs Angle libre', // L√©gende de la courbe
//         line: { color: color } // Couleur de la courbe
//     }], {
//         xaxis: { title: 'Angle libre (¬∞)' }, // Titre de l‚Äôaxe des abscisses
//         yaxis: { title: 'Force (N)' }, // Titre de l‚Äôaxe des ordonn√©es
//         margin: { l: 50, r: 30, t: 20, b: 50 }, // Marges du graphique
//         title: "Force en fonction de l'angle mesur√© (libre)" // Titre du graphique
//     }, { responsive: true }); // Rend le graphique adaptatif √† la taille de l‚Äô√©cran
// }


// --------------------------------------------------
// Rend les graphiques adaptatifs au redimensionnement de la fen√™tre
// --------------------------------------------------
window.addEventListener('resize', function() {
    plotForceGraph(); // Met √† jour le graphe de force
    plotAmplitudeGraph(); // Met √† jour le graphe d‚Äôamplitude
});

// --------------------------------------------------
// √âv√©nement de sauvegarde des donn√©es
// --------------------------------------------------
document.getElementById('saveButton').addEventListener('click', function() { // Ajoute un √©couteur de clic sur le bouton de sauvegarde
    socket.emit('save_data', { // Envoie les donn√©es au serveur via Socket.IO sous l'√©v√©nement 'save_data'
        patient: { // Donn√©es d‚Äôidentification du patient
            patient_name: patientData.patient_name, // Nom du patient (extrait d‚Äôun objet global patientData)
            finger: patientData.finger, // Doigt mesur√©
            phalange: patientData.phalange, // Phalange concern√©e (distale ou proximale)
            operator: patientData.operator // Nom de l‚Äôop√©rateur ou exp√©rimentateur
        },
        force: { // Donn√©es de force mesur√©e
            time: forceTime, // Liste des instants de mesure de la force
            data: forceData // Liste des valeurs de force en Newtons
        },
        amplitude_proximal: { // Donn√©es d‚Äôamplitude pour la phalange proximale
            time: angleTime, // Liste des instants correspondants
            data: angleDataProximal // Valeurs angulaires mesur√©es pour la phalange proximale
        },
        amplitude_distal: { // Donn√©es d‚Äôamplitude pour la phalange distale
            time: angleTime, // Liste des instants correspondants (m√™mes que ci-dessus)
            data: angleData // Valeurs angulaires mesur√©es pour la phalange distale
        }
    });
    alert('Donnees envoyees pour sauvegarde !'); // Affiche une alerte pour confirmer l‚Äôenvoi des donn√©es √† l‚Äôutilisateur
});

// --------------------------------------------------
// Bouton pour d√©marrer une nouvelle mesure
// --------------------------------------------------
document.getElementById('newMeasureButton').addEventListener('click', function() {
    window.location.href = "/"; // Redirige l‚Äôutilisateur vers la page d‚Äôaccueil (nouvelle mesure)
});

// --------------------------------------------------
// Affiche ou cache les graphiques dynamiquementa
// --------------------------------------------------

let graphsVisible = true; // √âtat initial : graphes visibles

document.getElementById('toggleGraphsButton').addEventListener('click', function () {
    const container = document.getElementById('graphs-container'); // S√©lectionne le conteneur des graphes
    graphsVisible = !graphsVisible; // Inverse l‚Äô√©tat (visible ‚Üî cach√©)

    // Bascule la classe 'hidden' pour masquer ou afficher les graphes
    container.classList.toggle('hidden');

    // Met √† jour le texte du bouton
    this.textContent = graphsVisible ? "Cacher les graphiques" : "Afficher les graphiques";

    // üîß Force Plotly √† redimensionner les graphes apr√®s un court d√©lai
    if (graphsVisible) {
        setTimeout(() => {
            Plotly.Plots.resize(document.getElementById('graph-force'));
            Plotly.Plots.resize(document.getElementById('graph-amplitude'));
        }, 300); // Attendre que l'animation CSS soit termin√©e
    }
});

function onStartMeasurementSeries() {
    // Fonction appel√©e lorsqu'on clique sur le bouton "D√©marrer une nouvelle mesure"
    // Elle d√©termine automatiquement quel angle utiliser en fonction de la phalange bloqu√©e
    // Puis elle d√©marre une nouvelle s√©rie de mesure si un angle valide est disponible

    // Initialisation d'une variable qui contiendra la valeur de l‚Äôangle libre √† utiliser
    let angleMesure = null;

    // Si la phalange bloqu√©e est la proximale (la plus proche de la paume)
    if (blockedPhalange === "proximale") {
        // Alors l‚Äôangle libre √† mesurer est celui de la phalange distale
        angleMesure = latestDistal;
    } else if (blockedPhalange === "distale") {
        // Si la phalange bloqu√©e est la distale (au bout du doigt)
        // Alors l‚Äôangle libre √† mesurer est celui de la phalange proximale
        angleMesure = latestProximal;
    }

    // V√©rifie si un angle a bien √©t√© d√©tect√©
    if (!angleMesure) {
        // Si ce n‚Äôest pas le cas, on alerte l‚Äôutilisateur et on arr√™te l'ex√©cution
        alert("Aucun angle d√©tect√© pour d√©marrer la mesure.");
        return;
    }

    // Convertit l‚Äôangle en entier (ex. 45.6 devient 45), puis ajoute le symbole ¬∞
    // Cela permet de cr√©er une √©tiquette lisible pour l‚Äôinterface utilisateur
    const angleLabel = `${parseInt(angleMesure)}¬∞`;

    // D√©marre une nouvelle s√©rie de mesure avec l‚Äô√©tiquette construite √† partir de l‚Äôangle d√©tect√©
    startNewMeasurementSeries(angleLabel);
}


function startNewMeasurementSeries(angleLabel) {
    // V√©rifie si une s√©rie est en cours avec des donn√©es d√©j√† pr√©sentes
    if (currentSeries && currentSeries.dataX.length > 0) {
        // Ajoute l‚Äôancienne s√©rie √† la liste globale
        measurementSeries.push(currentSeries);

        // Cr√©e une option pour le <select> avec couleur
        const option = document.createElement("option");
        option.value = currentSeries.label;              // ‚û§ la valeur permet d‚Äôidentifier la s√©rie (filtrage)
        option.textContent = currentSeries.label;        // ‚û§ le texte affich√©
        option.style.color = currentSeries.color;        // ‚û§ applique la couleur dans le menu
        document.getElementById("seriesSelector").appendChild(option);
    }

    // G√©n√©re un label unique du type "Blocage D-I √† 60¬∞ #2"
    const uniqueLabel = generateUniqueLabel(angleLabel);

    // Associe une couleur unique √† ce label (et non juste √† l‚Äôangle)
    const color = generateColor(uniqueLabel);

    // Met √† jour l'affichage de l'angle
    const angleSpan = document.getElementById("autoAngleDisplay");
    angleSpan.textContent = angleLabel;

    if (blockedPhalange === "proximale") {
        angleSpan.style.color = "#d9534f"; // Rouge (D-I)
    } else if (blockedPhalange === "distale") {
        angleSpan.style.color = "#007bff"; // Bleu (I-P)
    } else {
        angleSpan.style.color = "black"; // Valeur par d√©faut
    }


    // Cr√©e une nouvelle s√©rie vide
    currentSeries = {
        label: uniqueLabel, // Label identifiant la s√©rie (ex : "Blocage D-I √† 60¬∞")
        color: color,                           // Couleur sp√©cifique
        dataX: [],                              // Liste des angles
        dataY: [],                              // Liste des forces
        startForce: null,                       // Valeur de force initiale
        stopped: false                          // Indique si la s√©rie est termin√©e
    };
}


function appendToCurrentSeries(force, angle) {
    // Si aucune s√©rie n‚Äôest active ou si elle est d√©j√† arr√™t√©e, on quitte
    if (!currentSeries || currentSeries.stopped) return;

    // Si la force de d√©part n‚Äôa pas encore √©t√© d√©finie, on l‚Äôinitialise avec la premi√®re valeur re√ßue
    if (currentSeries.startForce === null) {
        currentSeries.startForce = force;
    } else {
        // D√©finition d‚Äôune tol√©rance de 10% autour de la force initiale
        const tol = 0.1 * currentSeries.startForce;

        // Si la force est revenue proche de la valeur de d√©part ET qu‚Äôil y a suffisamment de points
        if (Math.abs(force - currentSeries.startForce) < tol && currentSeries.dataX.length > 3) {
            currentSeries.stopped = true; // Marque la s√©rie comme termin√©e
            measurementSeries.push(currentSeries); // Ajoute √† l'historique des s√©ries

            // Ajoute la s√©rie termin√©e dans la liste d√©roulante de s√©lection
            const option = document.createElement("option");
            option.value = currentSeries.label;
            option.textContent = currentSeries.label;
            option.style.color = currentSeries.color; 
            document.getElementById("seriesSelector").appendChild(option);

            currentSeries = null;          // R√©initialise la s√©rie courante
            renderForceVsAnglePlot();      // Met √† jour le graphique
            return;                        // Fin de la fonction ici (ne pas ajouter le point)
        }
    }

    // Ajoute les nouvelles valeurs mesur√©es (force, angle) dans la s√©rie en cours
    currentSeries.dataX.push(angle); // Ajoute un angle (X)
    currentSeries.dataY.push(force); // Ajoute une force (Y)

    // Met √† jour le graphique avec les nouvelles donn√©es
    renderForceVsAnglePlot();
}

function renderForceVsAnglePlot() {
    // R√©cup√®re la s√©rie s√©lectionn√©e dans la liste d√©roulante (ou "all" si aucune)
    const selected = document.getElementById("seriesSelector")?.value || "all";

    // Pr√©pare un tableau pour les courbes (traces) √† afficher
    const traces = [];

    // Parcourt toutes les s√©ries enregistr√©es pour construire les courbes
    for (const serie of measurementSeries) {
        // Si une s√©rie sp√©cifique est s√©lectionn√©e, on saute les autres
        if (selected !== "all" && serie.label !== selected) continue;

        // Ajoute une trace au graphique pour cette s√©rie
        traces.push({
            x: serie.dataX,                     // Liste des angles
            y: serie.dataY,                     // Liste des forces
            mode: 'lines+markers',              // Lignes reli√©es avec des points visibles
            name: serie.label,                  // Nom affich√© dans la l√©gende
            line: { color: serie.color }        // Couleur sp√©cifique √† cette s√©rie
        });
    }

    // Si une s√©rie est encore en cours et doit √™tre affich√©e
    if (currentSeries && (selected === "all" || selected === currentSeries.label)) {
        traces.push({
            x: currentSeries.dataX,                  // Angles en cours
            y: currentSeries.dataY,                  // Forces en cours
            mode: 'lines+markers',                   // Points + ligne pointill√©e
            name: currentSeries.label + " (en cours)", // L√©gende avec indication que c'est une s√©rie active
            line: { color: currentSeries.color, dash: 'dot' } // Ligne pointill√©e pour la distinguer
        });
    }

    // Utilise Plotly pour tracer ou mettre √† jour le graphique avec les s√©ries s√©lectionn√©es
    Plotly.newPlot('graph-force-vs-angle', traces, {
        xaxis: { title: 'Angle libre (¬∞)' },         // Titre de l‚Äôaxe X
        yaxis: { title: 'Force (N)' },               // Titre de l‚Äôaxe Y
        margin: { l: 50, r: 30, t: 20, b: 50 }       // Marges autour du graphique
    }, { responsive: true });                        // Rend le graphique adaptatif √† la taille de l‚Äô√©cran
}


// --------------------------------------------------
// Simuler des valeurs d'angles
// --------------------------------------------------

function simulateFakeMeasurementSeries(angleLabel = "45¬∞") {
    startNewMeasurementSeries(angleLabel); // Cr√©e la s√©rie avec un nom unique

    const numPoints = 20;
    const baseForce = 10;
    const amplitude = 5;

    for (let i = 0; i < numPoints; i++) {
        const fakeForce = baseForce + Math.sin(i / 2) * amplitude + (Math.random() - 0.5);
        const fakeAngle = angleLabel === "30¬∞"
            ? 40 + Math.random() * 5
            : 60 + Math.random() * 5;

        appendToCurrentSeries(fakeForce, fakeAngle);
    }

    appendToCurrentSeries(baseForce, angleLabel === "30¬∞" ? 42 : 63);
}
