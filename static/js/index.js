// --------------------------------------------------
// G√©rer l'affichage des sections
// --------------------------------------------------

function hideAllForms() {
    document.getElementById('createPatientForm').style.display = 'none';  // Cache le formulaire de cr√©ation de fiche patient
    document.getElementById('loadPatientForm').style.display = 'none';    // Cache le formulaire de chargement d'une fiche existante
    document.getElementById('editPatientForm').style.display = 'none';    // Cache le formulaire d'√©dition
    document.getElementById('patientPreview').style.display = 'none';     // Cache l'aper√ßu de la fiche patient s√©lectionn√©e
}


// --------------------------------------------------
// Cr√©er une nouvelle fiche patient
// --------------------------------------------------

function toggleCreatePatientForm() {
    hideAllForms(); // Commence par cacher tous les autres formulaires ou aper√ßus

    const createForm = document.getElementById('createPatientForm'); // R√©cup√®re le formulaire de cr√©ation de fiche patient
    createForm.style.display = 'flex';                               // L'affiche en mode flex pour empiler verticalement les champs
    createForm.dataset.mode = 'create';                              // Ajoute une information personnalis√©e indiquant le mode "cr√©ation"

    // Titre
    document.getElementById('formTitle').innerText = "Cr√©er une nouvelle fiche patient"; // Change dynamiquement le titre du formulaire

    // Remise √† z√©ro des champs
    document.getElementById('patient_name').value = '';       // Vide le champ du nom
    document.getElementById('birthdate').value = '';          // Vide le champ de date de naissance
    document.getElementById('ageDisplay').style.display = 'block'; // Assure que le champ de l'√¢ge est visible
    document.getElementById('ageDisplay').innerText = '‚Äì';    // Remet un tiret dans l'affichage de l'√¢ge
    document.getElementById('weight').value = '';             // Vide le champ du poids
    document.getElementById('height').value = '';             // Vide le champ de la taille
    document.getElementById('sex').value = '';                // R√©initialise la s√©lection du sexe
    document.getElementById('pathology').value = '';          // Vide le champ de la pathologie
    document.getElementById('notes').value = '';              // Vide le champ des remarques
    document.getElementById('display_patient_name').innerText = '‚Äì'; // R√©initialise l'affichage du nom du patient

    // Rendre les champs modifiables
    document.getElementById('patient_name').readOnly = false; // Rend le champ nom √©ditable
    document.getElementById('birthdate').readOnly = false;    // Rend la date de naissance √©ditable √©galement
}

// --------------------------------------------------
// Modifier une fiche existante
// --------------------------------------------------

function toggleEditPatientForm() {
    hideAllForms(); // Cache tous les autres formulaires ou blocs affich√©s actuellement

    const editForm = document.getElementById('editPatientForm'); // R√©cup√®re le conteneur du formulaire d'√©dition
    editForm.style.display = 'block'; // Affiche le formulaire d'√©dition (il contient une liste d√©roulante)

    // Vide et recharge dynamiquement la liste d√©roulante des patients depuis le serveur
    fetch('/list_patients') // Fait une requ√™te GET √† l‚ÄôURL /list_patients pour obtenir la liste des fichiers patients
        .then(response => response.json()) // Convertit la r√©ponse en format JSON (liste de noms de fichiers)
        .then(files => { // Une fois les fichiers re√ßus :
            const select = document.getElementById('editPatientSelect'); // R√©cup√®re l‚Äô√©l√©ment <select> o√π injecter les options
            select.innerHTML = '<option value="">-- Choisir un patient --</option>'; // Initialise la liste avec une option par d√©faut

            files.forEach(name => { // Pour chaque nom de fichier dans la liste :
                const option = document.createElement('option'); // Cr√©e un nouvel √©l√©ment <option>
                option.value = name; // D√©finit la valeur r√©elle comme le nom du fichier
                option.text = name.replace('.json', '').replace('_', ' '); // Nettoie l'affichage : supprime l'extension .json et remplace les underscores par des espaces
                select.appendChild(option); // Ajoute cette option √† la liste d√©roulante
            });
        })
        .catch(error => { // En cas d‚Äôerreur lors de la requ√™te :
            console.error("Erreur lors du chargement des patients :", error); // Affiche l‚Äôerreur dans la console pour d√©bogage
        });
}


// --------------------------------------------------
// S√©lectionner un patient pour modification
// --------------------------------------------------

// Stock global pour l'historique du patient s√©lectionn√© (utilis√© plus tard lors de l‚Äôenregistrement ou l'affichage)
let currentHistory = [];

// Fonction appel√©e lorsqu‚Äôon choisit un patient dans la liste d√©roulante d'√©dition
function onSelectPatientToEdit() {
    hideAllForms(); // Cache tous les formulaires et aper√ßus pour commencer sur une base propre

    const selectedFile = document.getElementById('editPatientSelect').value; // R√©cup√®re le nom du fichier s√©lectionn√© dans la liste
    if (!selectedFile) { // Si aucun patient n‚Äôa √©t√© choisi (option vide), on arr√™te la fonction
        return;
    }

    // Requ√™te pour charger les donn√©es du patient depuis le backend (en JSON)
    fetch(`/load_patient/${selectedFile}`)
        .then(response => response.json()) // Convertit la r√©ponse en objet JSON
        .then(data => { // Lorsque les donn√©es du patient sont disponibles :
            currentHistory = data.history || []; // Stocke son historique dans la variable globale (ou tableau vide s‚Äôil n‚Äôy a rien)

            const createForm = document.getElementById('createPatientForm'); // R√©cup√®re le formulaire de cr√©ation (r√©utilis√© ici pour l'√©dition)
            createForm.style.display = 'flex'; // L‚Äôaffiche en mode flex (vertical)
            createForm.dataset.mode = 'edit'; // Change le mode du formulaire pour indiquer qu‚Äôil est en "√©dition"
            createForm.dataset.filename = selectedFile; // Stocke le nom du fichier s√©lectionn√© dans les attributs HTML

            document.getElementById('formTitle').innerText = "Modifier la fiche du patient"; // Change le titre pour "modifier"

            // üñäÔ∏è Remplit chaque champ avec les donn√©es du patient
            document.getElementById('patient_name').value = data.patient_name || ''; // Nom
            document.getElementById('display_patient_name').innerText = data.patient_name || '‚Äì'; // Affichage du nom en haut

            document.getElementById('birthdate').value = data.birthdate || ''; // Date de naissance

            document.getElementById('ageDisplay').style.display = 'block'; // Affiche le champ de l‚Äô√¢ge
            document.getElementById('ageDisplay').innerText = calculateAge(data.birthdate) + " ans"; // Calcule et affiche l'√¢ge

            document.getElementById('weight').value = data.weight || ''; // Poids
            document.getElementById('height').value = data.height || ''; // Taille
            document.getElementById('sex').value = data.sex || ''; // Sexe
            document.getElementById('pathology').value = data.pathology || ''; // Pathologie
            document.getElementById('notes').value = data.notes || ''; // Notes/remarques

            // Le nom et la date de naissance ne sont **pas** modifiables en mode √©dition
            document.getElementById('patient_name').readOnly = true;
            document.getElementById('birthdate').readOnly = true;
        })
        .catch(error => {
            console.error("Erreur lors du chargement du patient :", error); // Affiche une erreur dans la console si le chargement √©choue
            alert("Impossible de charger la fiche du patient."); // Alerte l‚Äôutilisateur via une fen√™tre pop-up
        });
}



// --------------------------------------------------
// Charger une fiche pour consultation
// --------------------------------------------------

function toggleLoadPatientForm() {
    hideAllForms(); // Masque tous les autres formulaires ou aper√ßus affich√©s √† l'√©cran

    const loadForm = document.getElementById('loadPatientForm'); // R√©cup√®re le formulaire de chargement d'une fiche patient
    loadForm.style.display = 'block'; // Affiche le formulaire de chargement

    fetch('/list_patients') // Envoie une requ√™te GET √† l'URL /list_patients pour obtenir la liste des fichiers patients disponibles
        .then(response => response.json()) // Convertit la r√©ponse en JSON (attendu : liste de noms de fichiers .json)
        .then(files => {
            const select = document.getElementById('patientFile'); // R√©cup√®re l'√©l√©ment <select> qui affichera les noms des patients
            select.innerHTML = ''; // Vide compl√®tement la liste avant d'ajouter les nouvelles options

            files.forEach(name => { // Pour chaque fichier dans la liste re√ßue :
                const option = document.createElement('option'); // Cr√©e une nouvelle balise <option> pour le menu d√©roulant
                option.value = name; // Attribue le nom du fichier comme valeur de l'option
                option.text = name.replace('.json', '').replace('_', ' '); // Nettoie le nom pour affichage : enl√®ve l'extension .json et remplace les "_" par des espaces
                select.appendChild(option); // Ajoute cette option √† la liste d√©roulante
            });
        })
        .catch(error => {
            console.error("Erreur lors du chargement des patients :", error); // Affiche une erreur dans la console si la requ√™te √©choue
        });
}

function loadPatient() {
    const selectedFile = document.getElementById('patientFile').value; // R√©cup√®re le fichier s√©lectionn√© dans le menu d√©roulant
    if (!selectedFile) { // Si aucun fichier n'est s√©lectionn√© :
        alert("Veuillez s√©lectionner un patient !"); // Affiche une alerte √† l'utilisateur
        return; // Interrompt la fonction
    }

    fetch(`/load_patient/${selectedFile}`) // Envoie une requ√™te pour charger le fichier JSON du patient s√©lectionn√©
        .then(response => response.json()) // Convertit la r√©ponse en objet JSON contenant les donn√©es du patient
        .then(data => {
            document.getElementById('patient_name').value = data.patient_name || ''; // Remplit le champ 'patient_name' avec la donn√©e re√ßue
            document.getElementById('previewName').innerText = data.patient_name || ''; // Affiche le nom du patient dans la zone d‚Äôaper√ßu
            document.getElementById('previewBirthdate').innerText = data.birthdate || ''; // Affiche la date de naissance
            document.getElementById('previewAge').innerText = data.age || ''; // Affiche l‚Äô√¢ge
            document.getElementById('previewWeight').innerText = data.weight || ''; // Affiche le poids
            document.getElementById('previewHeight').innerText = data.height || ''; // Affiche la taille
            document.getElementById('previewSex').innerText = data.sex || ''; // Affiche le sexe
            document.getElementById('previewPathology').innerText = data.pathology || ''; // Affiche la pathologie
            document.getElementById('previewNotes').innerText = data.notes || ''; // Affiche les remarques

            const preview = document.getElementById('patientPreview'); // R√©cup√®re le bloc d‚Äôaper√ßu du patient
            preview.classList.add('active'); // Rend le bloc visible (lui applique une classe qui change le style d‚Äôaffichage)
        })
        .catch(error => {
            console.error("Erreur lors du chargement du patient :", error); // Affiche une erreur technique dans la console
            alert("Impossible de charger la fiche du patient."); // Affiche une alerte √† l‚Äôutilisateur
        });
}

// --------------------------------------------------
// Enregistrer une fiche patient (cr√©ation ou √©dition)
// --------------------------------------------------

function savePatient() {
    const form = document.getElementById('createPatientForm'); // R√©cup√®re le formulaire de cr√©ation/√©dition
    const mode = form.dataset.mode || 'create'; // R√©cup√®re le mode actuel (cr√©ation ou √©dition), par d√©faut "create"
    const filename = form.dataset.filename || null; // Si en √©dition, r√©cup√®re le nom du fichier existant √† modifier

    const todayStr = new Date().toISOString().split('T')[0]; // Formate la date du jour en "YYYY-MM-DD"

    // R√©cup√©ration des valeurs depuis les champs du formulaire
    const patientName = document.getElementById('patient_name').value; // Nom du patient
    const birthdate = document.getElementById('birthdate').value; // Date de naissance
    const weight = parseInt(document.getElementById('weight').value) || 0; // Poids converti en entier (ou 0 si vide)
    const height = parseInt(document.getElementById('height').value) || 0; // Taille convertie en entier (ou 0 si vide)
    const sex = document.getElementById('sex').value; // Sexe s√©lectionn√©
    const pathology = document.getElementById('pathology').value; // Pathologie renseign√©e
    const notes = document.getElementById('notes').value; // Notes √©ventuelles

    // Structure des donn√©es principales du patient
    const data = {
        patient_name: patientName,          // Nom
        birthdate: birthdate,               // Date de naissance
        age: calculateAge(birthdate),       // √Çge calcul√© √† partir de la date de naissance
        weight: weight,                     // Poids
        height: height,                     // Taille
        sex: sex,                           // Sexe
        pathology: pathology,               // Pathologie
        mode: mode                          // Mode (create ou edit)
    };

    // Si on est en mode √©dition, on ajoute une entr√©e √† l‚Äôhistorique
    if (mode === 'edit') {
        const newEntry = {
            date: todayStr,         // Date actuelle
            weight: weight,         // Poids actuel
            height: height,         // Taille actuelle
            pathology: pathology,   // Pathologie actuelle
            notes: notes            // Remarques (ajout√©es uniquement ici en mode historique)
        };

        data.history = currentHistory || []; // R√©cup√®re l‚Äôhistorique d√©j√† existant (ou tableau vide)
        data.history.push(newEntry);         // Ajoute la nouvelle entr√©e √† l‚Äôhistorique
        data.filename = filename;            // Ajoute le nom du fichier √† modifier
    }

    // Si on est en mode cr√©ation, on met les notes dans la fiche principale directement
    if (mode === 'create') {
        data.notes = notes; // Attribue la note au niveau de la fiche (et non l‚Äôhistorique)
    }

    // Envoie les donn√©es au backend Flask via une requ√™te POST
    fetch('/save_patient', {
        method: 'POST',                               // M√©thode HTTP POST
        headers: {'Content-Type': 'application/json'}, // Indique que les donn√©es envoy√©es sont en JSON
        body: JSON.stringify(data)                    // Convertit l'objet JS en cha√Æne JSON
    })
    .then(response => {
        if (response.ok) {
            alert("Fiche patient enregistr√©e !"); // Alerte si l'enregistrement a r√©ussi
            toggleCreatePatientForm();            // Recharge le formulaire vide
        } else {
            alert("Erreur lors de l'enregistrement."); // Alerte en cas de r√©ponse non OK
        }
    })
    .catch(error => {
        console.error("Erreur lors de l'enregistrement :", error); // Log de l'erreur si l‚Äôenvoi a √©chou√©
    });
}



// --------------------------------------------------
// Outils compl√©mentaires
// --------------------------------------------------

// --------------------------------------------------
// Fonction de calcul de l'√¢ge √† partir d'une date de naissance
// --------------------------------------------------
function calculateAge(birthdateStr) { // Fonction qui re√ßoit une date de naissance (au format texte AAAA-MM-JJ)
    const today = new Date(); // Cr√©e un objet Date correspondant √† aujourd‚Äôhui
    const birthDate = new Date(birthdateStr); // Convertit la date de naissance en objet Date
    let age = today.getFullYear() - birthDate.getFullYear(); // Calcule l‚Äô√©cart entre les ann√©es
    const m = today.getMonth() - birthDate.getMonth(); // Compare les mois actuels avec ceux de naissance
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) { // Si l'anniversaire n'est pas encore pass√©
        age--; // R√©duit l'√¢ge d'un an
    }
    return age; // Renvoie l'√¢ge final
}

// --------------------------------------------------
// Ex√©cuter une fois que la page HTML est compl√®tement charg√©e
// --------------------------------------------------
document.addEventListener('DOMContentLoaded', () => {

    // --------------------------------------------------
    // Calcul dynamique de l'√¢ge et mise √† jour dans l'affichage
    // --------------------------------------------------
    const birthdateInput = document.getElementById('birthdate'); // R√©cup√®re le champ de date de naissance
    const ageDisplay = document.getElementById('ageDisplay');     // √âl√©ment affichant "xx ans"
    const ageInput = document.getElementById('age');              // Champ cach√© (si utilis√©) pour transmettre l‚Äô√¢ge au backend

    birthdateInput.addEventListener('input', () => { // √Ä chaque modification du champ de naissance
        const birthdateStr = birthdateInput.value; // Lit la date saisie

        if (birthdateStr) { // Si une date a bien √©t√© entr√©e
            const age = calculateAge(birthdateStr); // Calcul de l'√¢ge
            if (!isNaN(age)) { // V√©rifie que l'√¢ge est bien un nombre
                ageDisplay.innerText = age + " ans"; // Met √† jour l‚Äôaffichage
                if (ageInput) ageInput.value = age;  // Si le champ existe, on lui donne la m√™me valeur
            }
        } else { // Si la date a √©t√© effac√©e
            ageDisplay.innerText = '‚Äì'; // R√©initialise l'affichage de l'√¢ge
            if (ageInput) ageInput.value = ''; // Vide aussi le champ cach√©
        }
    });

    // --------------------------------------------------
    // V√©rifie si la fiche patient existe avant de soumettre le formulaire
    // --------------------------------------------------
    const measureForm = document.getElementById('measureForm'); // R√©cup√®re le formulaire de mesure s‚Äôil est pr√©sent
    if (measureForm) {
        measureForm.addEventListener('submit', async function (e) { // Ajoute un √©couteur √† la soumission
            e.preventDefault(); // Emp√™che le rechargement de la page

            const patientName = document.getElementById('patient_name').value.trim(); // R√©cup√®re le nom saisi
            if (!patientName) { // Si le champ est vide
                alert("Veuillez entrer un nom de patient."); // Message d‚Äôalerte
                return;
            }

            try {
                const response = await fetch(`/check_patient_exists/${encodeURIComponent(patientName)}`); // Requ√™te GET au serveur
                const data = await response.json(); // On convertit la r√©ponse en JSON

                if (data.exists) { // Si le patient est trouv√©
                    measureForm.submit(); // On soumet le formulaire
                } else {
                    alert("Ce patient n'existe pas encore dans la base de donn√©es.\n\nVeuillez lui cr√©er une fiche d'abord, s'il vous pla√Æt !");
                }
            } catch (error) { // En cas de probl√®me serveur
                console.error("Erreur lors de la v√©rification du patient :", error); // Affiche l‚Äôerreur en console
                alert("Une erreur est survenue pendant la v√©rification du patient."); // Message utilisateur
            }
        });
    }

    // --------------------------------------------------
    // Synchroniser automatiquement le champ "Nom" (input ‚Üî affichage)
    // --------------------------------------------------
    const patientNameInput = document.getElementById('patient_name');         // Champ de texte o√π l'utilisateur √©crit le nom
    const displayPatientName = document.getElementById('display_patient_name'); // √âl√©ment HTML o√π le nom est affich√©

    function syncPatientName() { // Fonction pour synchroniser les deux
        displayPatientName.textContent = patientNameInput.value.trim() || '‚Äì'; // Met √† jour l'affichage (ou un tiret si vide)
    }

    if (patientNameInput && displayPatientName) { // V√©rifie que les deux √©l√©ments existent
        patientNameInput.addEventListener('input', syncPatientName); // √Ä chaque saisie, met √† jour l'affichage
        syncPatientName(); // Mise √† jour initiale lors du chargement de la page
    }
});
